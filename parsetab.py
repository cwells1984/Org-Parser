
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "EXP ID NUM STR VARstmt : assign\n            | declare\n            | binopdeclare : var id\n               | var assignassign : id '=' term\n              | id '=' strbinop : term literal term\n             | term exp term\n             | str '+' strterm : id\n            | num\n            | binopliteral : '+'\n               | '-'\n               | '*'\n               | '/' id : IDnum : NUMexp : EXPstr : STRvar : VAR"
    
_lr_action_items = {'EXP':([1,2,3,7,10,11,13,25,26,27,28,29,30,],[14,-13,-21,-12,-19,-18,-11,14,-13,-11,14,-10,14,]),'+':([1,2,3,7,8,10,11,13,25,26,27,28,29,30,31,],[15,-13,-21,-12,23,-19,-18,-11,15,-13,-11,15,-10,15,23,]),'*':([1,2,3,7,10,11,13,25,26,27,28,29,30,],[16,-13,-21,-12,-19,-18,-11,16,-13,-11,16,-10,16,]),'-':([1,2,3,7,10,11,13,25,26,27,28,29,30,],[17,-13,-21,-12,-19,-18,-11,17,-13,-11,17,-10,17,]),'/':([1,2,3,7,10,11,13,25,26,27,28,29,30,],[18,-13,-21,-12,-19,-18,-11,18,-13,-11,18,-10,18,]),'NUM':([0,14,15,16,17,18,19,20,24,],[10,-20,-14,-16,-15,-17,10,10,10,]),'STR':([0,14,15,16,17,18,19,20,23,24,],[3,-20,-14,-16,-15,-17,3,3,3,3,]),'VAR':([0,],[12,]),'=':([11,13,22,],[-18,24,24,]),'ID':([0,6,12,14,15,16,17,18,19,20,24,],[11,11,-22,-20,-14,-16,-15,-17,11,11,11,]),'$end':([2,3,4,5,7,9,10,11,21,22,25,26,27,28,29,30,31,],[-3,-21,0,-1,-12,-2,-19,-18,-5,-4,-8,-13,-11,-9,-10,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term':([0,19,20,24,],[1,25,28,30,]),'assign':([0,6,],[5,21,]),'exp':([1,25,28,30,],[20,20,20,20,]),'binop':([0,19,20,24,],[2,26,26,26,]),'stmt':([0,],[4,]),'id':([0,6,19,20,24,],[13,22,27,27,27,]),'literal':([1,25,28,30,],[19,19,19,19,]),'num':([0,19,20,24,],[7,7,7,7,]),'str':([0,19,20,23,24,],[8,8,8,29,31,]),'var':([0,],[6,]),'declare':([0,],[9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmt","S'",1,None,None,None),
  ('stmt -> assign','stmt',1,'p_expression_stmt','main.py',75),
  ('stmt -> declare','stmt',1,'p_expression_stmt','main.py',76),
  ('stmt -> binop','stmt',1,'p_expression_stmt','main.py',77),
  ('declare -> var id','declare',2,'p_expression_declare','main.py',80),
  ('declare -> var assign','declare',2,'p_expression_declare','main.py',81),
  ('assign -> id = term','assign',3,'p_expression_assign','main.py',84),
  ('assign -> id = str','assign',3,'p_expression_assign','main.py',85),
  ('binop -> term literal term','binop',3,'p_expression_binop','main.py',88),
  ('binop -> term exp term','binop',3,'p_expression_binop','main.py',89),
  ('binop -> str + str','binop',3,'p_expression_binop','main.py',90),
  ('term -> id','term',1,'p_expression_term','main.py',93),
  ('term -> num','term',1,'p_expression_term','main.py',94),
  ('term -> binop','term',1,'p_expression_term','main.py',95),
  ('literal -> +','literal',1,'p_term_literal','main.py',98),
  ('literal -> -','literal',1,'p_term_literal','main.py',99),
  ('literal -> *','literal',1,'p_term_literal','main.py',100),
  ('literal -> /','literal',1,'p_term_literal','main.py',101),
  ('id -> ID','id',1,'p_term_id','main.py',104),
  ('num -> NUM','num',1,'p_term_num','main.py',108),
  ('exp -> EXP','exp',1,'p_term_exp','main.py',112),
  ('str -> STR','str',1,'p_term_str','main.py',116),
  ('var -> VAR','var',1,'p_term_var','main.py',120),
]
